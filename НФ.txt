# Основы нормализации данных в реляционных базах данных

## Введение в термины

Давайте начнём с основных понятий, как если бы я объяснял это на первой лекции своим студентам.

### Отношение (Relation)
Это просто таблица в базе данных. Например, таблица "Студенты":

| StudentID | Name     | BirthDate  | Faculty     |
|-----------|----------|------------|-------------|
| 1         | Иванов   | 1995-03-15 | Информатика |
| 2         | Петрова  | 1996-07-22 | Математика  |

### Кортеж (Tuple)
Это строка в таблице (одна запись). Например: (2, "Петрова", "1996-07-22", "Математика")

### Атрибут (Attribute)
Это столбец в таблице. Например: "Name", "BirthDate" и т.д.

### Первичный ключ (Primary Key)
Уникальный идентификатор записи. В примере выше - это StudentID. Он:
1. Уникален (нет двух студентов с одинаковым ID)
2. Не содержит NULL (у каждой записи есть значение)

### Потенциальный ключ (Candidate Key)
Атрибут или набор атрибутов, которые могли бы быть первичным ключом. Например, в таблице студентов:
- StudentID - очевидный первичный ключ
- Но если бы у нас было поле "Паспортные данные" (уникальное для каждого студента), оно тоже могло бы быть потенциальным ключом

## Нормальные формы

Нормализация - это процесс организации данных в БД для уменьшения избыточности и улучшения целостности.

### 1НФ (Первая нормальная форма)
Таблица в 1НФ, если:
1. Все атрибуты атомарны (не делятся на части)
2. Нет повторяющихся групп

Пример НЕ 1НФ:
| StudentID | Name     | Subjects                |
|-----------|----------|-------------------------|
| 1         | Иванов   | Математика, Физика      |
| 2         | Петрова  | Физика, Химия           |

Проблема: атрибут Subjects содержит несколько значений.

Исправленный вариант (1НФ):
| StudentID | Name     | Subject    |
|-----------|----------|------------|
| 1         | Иванов   | Математика |
| 1         | Иванов   | Физика     |
| 2         | Петрова  | Физика     |
| 2         | Петрова  | Химия      |

### 2НФ (Вторая нормальная форма)
Таблица во 2НФ, если:
1. Она в 1НФ
2. Все неключевые атрибуты зависят от всего первичного ключа (а не от его части)

Пример НЕ 2НФ (для составного ключа {OrderID, ProductID}):
| OrderID | ProductID | ProductName | Quantity |
|---------|-----------|-------------|----------|
| 1001    | 1         | Клавиатура  | 2        |
| 1001    | 2         | Мышь        | 3        |
| 1002    | 1         | Клавиатура  | 1        |

Проблема: ProductName зависит только от ProductID, а не от всего ключа.

Исправленный вариант (2НФ):
Таблица OrderDetails:
| OrderID | ProductID | Quantity |
|---------|-----------|----------|
| 1001    | 1         | 2        |
| 1001    | 2         | 3        |
| 1002    | 1         | 1        |

Таблица Products:
| ProductID | ProductName |
|-----------|-------------|
| 1         | Клавиатура  |
| 2         | Мышь        |

### 3НФ (Третья нормальная форма)
Таблица в 3НФ, если:
1. Она во 2НФ
2. Нет транзитивных зависимостей (неключевые атрибуты не зависят от других неключевых атрибутов)

Пример НЕ 3НФ:
| StudentID | Name     | Faculty     | Dean           |
|-----------|----------|-------------|----------------|
| 1         | Иванов   | Информатика | Смирнов А.А.   |
| 2         | Петрова  | Математика  | Иванова М.В.   |

Проблема: Dean зависит от Faculty, а не напрямую от StudentID.

Исправленный вариант (3НФ):
Таблица Students:
| StudentID | Name     | Faculty     |
|-----------|----------|-------------|
| 1         | Иванов   | Информатика |
| 2         | Петрова  | Математика  |

Таблица Faculties:
| Faculty     | Dean           |
|-------------|----------------|
| Информатика | Смирнов А.А.   |
| Математика  | Иванова М.В.   |

## Доменно-ключевая нормальная форма (РМД/РМБ - нормальная форма Бойса-Кодда)

Это усиленная версия 3НФ. Таблица в РМД, если:
1. Каждый детерминант (атрибут, от которого зависят другие) является потенциальным ключом
Пример НЕ РМД:
Предположим, у нас есть таблица, где:
- {StudentID, Course} - первичный ключ
- Professor зависит от Course
Но Professor не является потенциальным ключом

Решение: разделить таблицу, как в 3НФ

## Темпоральные базы данных

Это базы данных, которые учитывают временной аспект информации. Они хранят:
- Когда данные стали актуальными
- Когда они перестали быть актуальными

Пример:
| EmployeeID | Name   | Position  | StartDate  | EndDate    |
|------------|--------|-----------|------------|------------|
| 1          | Иванов | Менеджер  | 2020-01-01 | 2022-12-31 |
| 1          | Иванов | Директор  | 2023-01-01 | NULL       |

NULL в EndDate означает, что запись актуальна на текущий момент.

## 6НФ (Шестая нормальная форма)

Таблица в 6НФ, если она не может быть далее декомпозирована без потери информации. Используется редко, в основном для темпоральных БД.

Пример:
Разделение таблицы на отдельные атрибуты с временными метками:
Таблица EmployeeNames:
| EmployeeID | Name   | StartDate  | EndDate    |
|------------|--------|------------|------------|
| 1          | Иванов | 2020-01-01 | NULL       |

Таблица EmployeePositions:
| EmployeeID | Position | StartDate  | EndDate    |
|------------|----------|------------|------------|
| 1          | Менеджер | 2020-01-01 | 2022-12-31 |
| 1          | Директор | 2023-01-01 | NULL       |

## Заключение

Нормализация - это постепенный процесс:
1НФ → 2НФ → 3НФ → РМД → ... → 6НФ

На практике чаще всего останавливаются на 3НФ или РМД. Более высокие нормальные формы используются в специфических случаях, таких как темпоральные базы данных.

Главная цель - устранить аномалии при вставке, обновлении и удалении данных, сохраняя при этом логическую целостность данных.
